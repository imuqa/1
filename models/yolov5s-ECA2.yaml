nc: 1
depth_multiple: 0.33  # model depth multiple 模型深度，控制BottleneckCSP
width_multiple: 0.5  # layer channel multiple
#depth_multiple:表示BottleneckCSP模块的层缩放因子，将所有的Bottleneck乘上此参数得到最终个数
#width_multiple：表示卷积通道的缩放因子，将配置里的backbone和head部分有关的COnv通道的设置，全部乘以该系数
#通过这两个参数，实现不同复杂度的模型设计



#三个不同尺度的线性框
anchors:
  - [10,13, 16,30, 33,23]  # P3/8 经过8倍下采样后，在这个尺度上的线性框大小      宽10高13  宽16高30
  - [30,61, 62,45, 59,119]  # P4/16
  - [116,90, 156,198, 373,326]  # P5/32


# YOLOv5 v6.0 backbone
backbone:
  # [from, number, module, args]
  [[-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2
   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4
   [-1, 3, C3, [128]],
   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
   [-1, 6, C3, [256]],
   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
   [-1, 9, C3, [512]],
   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
   [-1, 3, C3, [1024]],
   [-1, 1, SPPF, [1024, 5]],  # 9
  ]

# YOLOv5 v6.0 head
head:
  [[-1, 1, Conv, [512, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 6], 1, Concat, [1]],  # cat backbone P4
   [-1, 3, C3, [512, False]],  # 13

   [-1, 1, Conv, [256, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3
   [-1, 3, C3, [256, False]],  # 17 (P3/8-small)
   [-1, 1, ECA, [256]],#18

   [-1, 1, Conv, [256, 3, 2]],
   [[-1, 14], 1, Concat, [1]],  # cat head P4
   [-1, 3, C3, [512, False]],  # 21 (P4/16-medium)
   [-1, 1, ECA, [512]],#22

   [-1, 1, Conv, [512, 3, 2]],
   [[-1, 10], 1, Concat, [1]],  # cat head P5
   [-1, 3, C3, [1024, False]],  # 25 (P5/32-large)

   [[17, 21, 25], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
  ]
#activate pytorch1
#cd C:\Users\17237\Desktop\yolov5-master\yolov5-me   cd C:\Users\aaa\Desktop\yolov5-master\yolov5-me
#python train.py --cfg yolov5s-ECA2.yaml --project runs/train/yolov5s-ECA